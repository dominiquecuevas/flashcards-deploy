// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Flashcard {
  id        String    @default(cuid()) @id
  sideA     String
  sideB     String  
  category  Category?   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId  String?
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @updatedAt @map(name: "updated_at")
  creator   User?     @relation(fields: [creatorId], references: [id])
  creatorId String?
  
  @@map(name: "flashcards")
}

model Category {
  id        String    @default(cuid()) @id
  name      String
  createdAt DateTime  @default(now()) @map(name: "created_at")
  creator   User?     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId String?
  flashcards  Flashcard[]
  
  @@map(name: "categories")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields:[userId], references:[id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique@map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields:[userId], references:[id], onDelete: Cascade)
}

model User {
  id            String      @default(cuid()) @id
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime    @default(now()) @map(name: "created_at")
  updatedAt     DateTime    @updatedAt @map(name: "updated_at")
  categories    Category[]
  flashcards    Flashcard[]

  @@map(name: "users")
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
